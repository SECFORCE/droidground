import { useEffect } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import toast from "react-hot-toast";
import { RESTManagerInstance } from "@client/api/rest";
import { StartExploitAppRequest } from "@shared/api";
import { useAPI } from "@client/context/API";

interface IModalProps {
  dialogRef: React.RefObject<HTMLDialogElement | null>;
}

export const StartExploitAppModal: React.FC<IModalProps> = ({ dialogRef }) => {
  const { featuresConfig } = useAPI();
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<StartExploitAppRequest>();

  useEffect(() => {
    const handleClose = () => {
      reset();
    };

    const dialog = dialogRef.current;
    if (dialog) {
      dialog.addEventListener("close", handleClose);
    }

    return () => {
      if (dialog) {
        dialog.removeEventListener("close", handleClose);
      }
    };
  }, []);

  const startExploitApp: SubmitHandler<StartExploitAppRequest> = async data => {
    if (!data.packageName) {
      return;
    }

    try {
      await RESTManagerInstance.startExploitApp(data);
      toast.success("Exploit app correctly started.");
      dialogRef.current?.close();
    } catch (e) {
      console.error(e);
      toast.error("Failed to start exploit app.");
    }
  };

  return (
    <dialog ref={dialogRef} className="modal">
      <div className="modal-box max-w-3xl">
        <h3 className="font-bold text-lg mb-4">Start Exploit App</h3>
        <p className="mb-4">
          This will allow you start one of the installed apps as the <b>Exploit App</b>. <br />
          The app will stay active for {featuresConfig.exploitAppDuration} seconds and then the <b>Target App</b> will
          be restarted.
        </p>
        <form onSubmit={handleSubmit(startExploitApp)} className="space-y-4">
          <input
            type="text"
            placeholder="com.exploit.app"
            className="input input-bordered w-full"
            {...register("packageName", { required: true })}
          />
          {errors.packageName && <p className="text-error text-sm">Package Name is required.</p>}

          {/* Submit */}
          <div className="flex justify-end">
            <input className="btn btn-primary" type="submit" value="Start Exploit App" />
          </div>
        </form>
      </div>
      <form method="dialog" className="modal-backdrop">
        <button>close</button>
      </form>
    </dialog>
  );
};
